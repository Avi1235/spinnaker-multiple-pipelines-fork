plugins {
    id "java"
    id "maven-publish"
    id "io.spinnaker.plugin.service-extension"
    id "kotlin"
    id "groovy"
    id "jacoco"
}

compileGroovy {
    sourceCompatibility = "11"
}
sourceSets {
    main {
        java { srcDirs = [] }    // no source dirs for the java compiler
        groovy { srcDirs = ["src/main/java", "src/main/groovy"] }  // compile   everything in src/ with groovy
    }
}

compileKotlin {
    kotlinOptions {
        languageVersion = "1.4"
        jvmTarget = "11"
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://armory.jfrog.io/armory/gradle-dev-local/'
        credentials(HttpHeaderCredentials) {
            name = "X-JFrog-Art-Api"
            value = "${artifactory_token}"
        }
        authentication {
            header(HttpHeaderAuthentication)
        }
    }
}

spinnakerPlugin {
    serviceName = "orca"
    pluginClass = "io.armory.plugin.smp.RunMultiplePipelinesPlugin"
    requires = "orca>=0.0.0"
}

dependencies {
    // Implementation Dependencies
    implementation 'com.google.guava:guava:30.0-jre'
    implementation enforcedPlatform("io.spinnaker.orca:orca-bom:${orcaVersion}")

    // CompileOnly Dependencies
    compileOnly 'de.huxhorn.sulky:de.huxhorn.sulky.ulid'
    compileOnly 'io.reactivex:rxjava'
    compileOnly "io.spinnaker.orca:orca-api"
    compileOnly "io.spinnaker.orca:orca-front50"
    compileOnly "io.spinnaker.orca:orca-core"
    compileOnly "io.spinnaker.orca:orca-sql"
    compileOnly "io.spinnaker.orca:orca-clouddriver"
    compileOnly "io.spinnaker.orca:orca-interlink"
    compileOnly "io.spinnaker.kork:kork-web"
    compileOnly "io.spinnaker.kork:kork-artifacts"
    compileOnly "io.spinnaker.kork:kork-expressions"
    compileOnly "io.spinnaker.kork:kork-moniker"
    compileOnly "io.spinnaker.kork:kork-plugins"
    compileOnly "io.spinnaker.kork:kork-plugins-spring-api"
    compileOnly "io.spinnaker.kork:kork-telemetry"
    compileOnly "io.spinnaker.kork:kork-sql"
    compileOnly "io.spinnaker.orca:orca-api"
    compileOnly "org.codehaus.groovy:groovy-all:3.0.12"
    compileOnly "org.codehaus.groovy:groovy"
    compileOnly "org.projectlombok:lombok"
    compileOnly "org.pf4j:pf4j"

    // Annotation Processor Dependencies
    annotationProcessor platform("io.spinnaker.orca:orca-bom:$orcaVersion")
    annotationProcessor "org.projectlombok:lombok"

    // Test Implementation Dependencies
    testImplementation "io.spinnaker.orca:orca-api"
    testImplementation "io.spinnaker.orca:orca-api-tck"
    testImplementation "io.spinnaker.orca:orca-queue"
    testImplementation "io.spinnaker.orca:orca-front50"
    testImplementation "io.spinnaker.kork:kork-plugins-tck"
    testImplementation "io.spinnaker.kork:kork-plugins-spring-api"
    testImplementation "org.spockframework:spock-core"
    testImplementation ("org.mockito:mockito-core:5.6.0") { force = true }
    testImplementation ("org.mockito:mockito-junit-jupiter:5.6.0") { force = true }
    testImplementation ("net.bytebuddy:byte-buddy:1.14.9") { force = true }
    testImplementation ("net.bytebuddy:byte-buddy-agent:1.14.9") { force = true }

    // Test Compile Dependencies
    testCompile "org.projectlombok:lombok"
}

tasks.withType(Test) {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
    }
}
